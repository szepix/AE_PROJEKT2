clear all;
run('skrypt1.m');
max_weight = 0.3 * sum(items(:, 1));

nvars = N;
lb = zeros(1, nvars);
ub = ones(1, nvars);

intcon = 1:N;

filename = 'custom_generation_number.mat'; % Ustaw nazwę pliku

SaveBestGenerationWithFilename = @(options, state, flag) SaveBestGeneration(options, state, flag, filename);


options = optimoptions('ga', ...
    'PopulationSize', 1000, ...
    'MaxGenerations', 1000, ...,
    'MaxStallGenerations',200,...,
    'CrossoverFcn', @crossoverscattered, ...
    'MutationFcn', {@mutationgaussian, 0.8}, ...
    'CrossoverFraction', 0.8, ...
    'MigrationFraction', 0, ...
    'EliteCount', 10, ...
    'SelectionFcn', {@selectiontournament, 6}, ...
    'FunctionTolerance', 1e-10, ...
    'ConstraintTolerance',1e-1000 ,...
    'PlotFcn', {@gaplotbestf, @CustomPlotFcn, @VariancePlotFcn}, ...
    'OutputFcn', SaveBestGenerationWithFilename, ...
    'UseParallel', true);

[x_opt, fval_opt, exitflag, output] = ga(@(x) ObjectiveFunction(x, items, max_weight), nvars, [], [], [], [], lb, ub, [], intcon, options);

x_opt = logical(x_opt);
optimal_items = items(x_opt, :);
optimal_weight = sum(optimal_items(:, 1));
optimal_value = -fval_opt;
exportgraphics(gcf,'plot.pdf')

fprintf('Optymalna waga: %.2f\n', optimal_weight);
fprintf('Optymalna wartość: %.2f\n', optimal_value);
disp('Optymalne przedmioty:');
disp(optimal_items);
disp(output);
